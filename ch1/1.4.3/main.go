package main

import (
	"bytes"
	"fmt"
	"github.com/gogo/protobuf/protoc-gen-gogo/generator"
	"io"
	"os"
	"strings"
	"testing"
)

//func Fprintln(w io.Writer, a ...interface{}) (n int, err error) {}
//type Writer interface {
//	Write(p []byte) (n int, err error)
//}
//type error interface {
//	Error() string
//}

type UpperWriter struct {
	io.Writer
}

func (p *UpperWriter) Write(data []byte) (n int, err error) {
	return p.Writer.Write(bytes.ToUpper(data))
}

type UpperString string

func (s UpperString) String() string {
	return strings.ToUpper(string(s))
}
func main() {
	fmt.Fprintln(&UpperWriter{os.Stdout}, "hello,world")
	fmt.Fprintln(os.Stdout, UpperString("hello,world"))

	var (
		f *os.File
		a io.ReadCloser = (*os.File)(f) //隐式转换  *os.File 满足io.ReadCloser接口
		b io.Reader     = a             // 隐式转换 io.ReadCloser 满足io.Reader
		c io.Closer     = a             // 隐式转换
		d io.Reader     = c.(io.Reader) // 显式转换 io.Closer 不满足io.Reader
		_               = b
		_               = d
	)
	// var err runtime.Error
	//var p proto.Message
	// The Error interface identifies a run time error.
	type Error interface {
		error
		// 定义RuntimeError 避免无意中被适配

		// RuntimeError is a no-op function but
		// serves to distinguish types that are run time
		// errors from ordinary errors: a type is a
		// run time error if it has a RuntimeError method.
		RuntimeError()
	}
	//var test testing.TB
	var test testing.TB = new(TB)
	test.Fatal("new(TB) Fatal ")
	//type TB interface {
	//	Cleanup(func())
	//	Error(args ...interface{})
	//	Errorf(format string, args ...interface{})
	//	Fail()
	//	FailNow()
	//	Failed() bool
	//	Fatal(args ...interface{})
	//	Fatalf(format string, args ...interface{})
	//	Helper()
	//	Log(args ...interface{})
	//	Logf(format string, args ...interface{})
	//	Name() string
	//	Skip(args ...interface{})
	//	SkipNow()
	//	Skipf(format string, args ...interface{})
	//	Skipped() bool
	//	TempDir() string
	//
	//	// A private method to prevent users implementing the
	//	// interface and so future additions to it will not
	//	// violate Go 1 compatibility.
	//	private()
	//}

}

type TB struct {
	testing.TB
}

func (t *TB) Fatal(args ...interface{}) {
	fmt.Println("TB.Fatal disable")
}

//type Plugin interface {
//	// Name identifies the plugin.
//	Name() string
//	// Init is called once after data structures are built but before
//	// code generation begins.
//	Init(g *Generator)
//	// Generate produces the code generated by the plugin for this file,
//	// except for the imports, by calling the generator's methods P, In, and Out.
//	Generate(file *FileDescriptor)
//	// GenerateImports produces the import declarations for this file.
//	// It is called after Generate.
//	GenerateImports(file *FileDescriptor)
//}
// gRPC 插件
type grpcPlugin struct {
	*generator.Generator
}

func (p *grpcPlugin) Name() string {
	return "grpc"
}

func (p *grpcPlugin) Init(g *generator.Generator) {
	//真正的实现运行时才被注入
	p.Generator = g
}

//GenerateImports
func (p *grpcPlugin) GenerateImports(file *generator.FileDescriptor) {
	p.P("p 真正的实现运行时才通过 Init注入 ")
	//return file
}
